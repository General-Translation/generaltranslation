{"version":3,"file":"index.cjs.min.cjs","sources":["../node_modules/tslib/tslib.es6.js","../src/settings/settingsUrls.ts","../src/settings/settings.ts","../src/locales/isValidLocale.ts","../src/locales/isSameDialect.ts","../src/locales/isSameLanguage.ts","../src/api/translate/translate.ts","../src/api/jsx/translateJsx.ts","../src/formatting/format.ts","../src/formatting/string_content.ts","../src/locales/getLocaleEmoji.ts","../src/index.ts","../src/locales/determineLocale.ts","../src/locales/getLocaleDirection.ts","../src/locales/getLocaleName.ts","../src/locales/getLocaleProperties.ts","../src/locales/requiresTranslation.ts"],"sourcesContent":["/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\r\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\r\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\r\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\r\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\r\n    var _, done = false;\r\n    for (var i = decorators.length - 1; i >= 0; i--) {\r\n        var context = {};\r\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\r\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\r\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\r\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\r\n        if (kind === \"accessor\") {\r\n            if (result === void 0) continue;\r\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\r\n            if (_ = accept(result.get)) descriptor.get = _;\r\n            if (_ = accept(result.set)) descriptor.set = _;\r\n            if (_ = accept(result.init)) initializers.unshift(_);\r\n        }\r\n        else if (_ = accept(result)) {\r\n            if (kind === \"field\") initializers.unshift(_);\r\n            else descriptor[key] = _;\r\n        }\r\n    }\r\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\r\n    done = true;\r\n};\r\n\r\nexport function __runInitializers(thisArg, initializers, value) {\r\n    var useValue = arguments.length > 2;\r\n    for (var i = 0; i < initializers.length; i++) {\r\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\r\n    }\r\n    return useValue ? value : void 0;\r\n};\r\n\r\nexport function __propKey(x) {\r\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\r\n};\r\n\r\nexport function __setFunctionName(f, name, prefix) {\r\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\r\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\r\n};\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\r\n    return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\r\n    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n\r\nexport function __addDisposableResource(env, value, async) {\r\n    if (value !== null && value !== void 0) {\r\n        if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\r\n        var dispose, inner;\r\n        if (async) {\r\n            if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\r\n            dispose = value[Symbol.asyncDispose];\r\n        }\r\n        if (dispose === void 0) {\r\n            if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\r\n            dispose = value[Symbol.dispose];\r\n            if (async) inner = dispose;\r\n        }\r\n        if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\r\n        if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\r\n        env.stack.push({ value: value, dispose: dispose, async: async });\r\n    }\r\n    else if (async) {\r\n        env.stack.push({ async: true });\r\n    }\r\n    return value;\r\n\r\n}\r\n\r\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\r\n\r\nexport function __disposeResources(env) {\r\n    function fail(e) {\r\n        env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\r\n        env.hasError = true;\r\n    }\r\n    var r, s = 0;\r\n    function next() {\r\n        while (r = env.stack.pop()) {\r\n            try {\r\n                if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\r\n                if (r.dispose) {\r\n                    var result = r.dispose.call(r.value);\r\n                    if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\r\n                }\r\n                else s |= 1;\r\n            }\r\n            catch (e) {\r\n                fail(e);\r\n            }\r\n        }\r\n        if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\r\n        if (env.hasError) throw env.error;\r\n    }\r\n    return next();\r\n}\r\n\r\nexport function __rewriteRelativeImportExtension(path, preserveJsx) {\r\n    if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\r\n        return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\r\n            return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : (d + ext + \".\" + cm.toLowerCase() + \"js\");\r\n        });\r\n    }\r\n    return path;\r\n}\r\n\r\nexport default {\r\n    __extends: __extends,\r\n    __assign: __assign,\r\n    __rest: __rest,\r\n    __decorate: __decorate,\r\n    __param: __param,\r\n    __esDecorate: __esDecorate,\r\n    __runInitializers: __runInitializers,\r\n    __propKey: __propKey,\r\n    __setFunctionName: __setFunctionName,\r\n    __metadata: __metadata,\r\n    __awaiter: __awaiter,\r\n    __generator: __generator,\r\n    __createBinding: __createBinding,\r\n    __exportStar: __exportStar,\r\n    __values: __values,\r\n    __read: __read,\r\n    __spread: __spread,\r\n    __spreadArrays: __spreadArrays,\r\n    __spreadArray: __spreadArray,\r\n    __await: __await,\r\n    __asyncGenerator: __asyncGenerator,\r\n    __asyncDelegator: __asyncDelegator,\r\n    __asyncValues: __asyncValues,\r\n    __makeTemplateObject: __makeTemplateObject,\r\n    __importStar: __importStar,\r\n    __importDefault: __importDefault,\r\n    __classPrivateFieldGet: __classPrivateFieldGet,\r\n    __classPrivateFieldSet: __classPrivateFieldSet,\r\n    __classPrivateFieldIn: __classPrivateFieldIn,\r\n    __addDisposableResource: __addDisposableResource,\r\n    __disposeResources: __disposeResources,\r\n    __rewriteRelativeImportExtension: __rewriteRelativeImportExtension,\r\n};\r\n","export const defaultCacheUrl = \"https://cdn.gtx.dev\" as const;\nexport const defaultBaseUrl = \"https://api.gtx.dev\" as const;\nexport const defaultRuntimeApiUrl = \"https://runtime.gtx.dev\" as const;\nexport const translateBatchUrl = \"/v1/translate/batch\" as const;\nexport const translateJsxUrl = \"/v1/translate/react\" as const;\nexport const translateContentUrl = \"/v1/translate/content\" as const;\nexport const updateProjectTranslationsUrl = \"/v1/project/translations/update\" as const;\nexport const getProjectLocalesUrl = \"/v1/project/locales\" as const;","export const libraryDefaultLocale = \"en-US\" as const;\nexport const localeCookieName = \"generaltranslation.locale\" as const;\nexport const localeHeaderName = \"x-generaltranslation-locale\";\nexport const maxTimeout = 60000;\n","import { libraryDefaultLocale } from \"../internal\";\n\nconst scriptExceptions = [\n    \"Cham\",\n    \"Jamo\",\n    \"Kawi\",\n    \"Lisu\",\n    \"Toto\",\n    \"Thai\"\n];\n\n/**\n * Checks if a given BCP 47 language code is valid.\n * @param {string} code - The BCP 47 language code to validate.\n * @returns {boolean} True if the BCP 47 code is valid, false otherwise.\n * @internal\n */\nexport const _isValidLocale = (locale: string): boolean => {\n    try {\n        const { language, region, script } = new Intl.Locale(locale);\n        if (locale.split('-').length !== (() => {\n            let partCount = 1;\n            if (region) partCount += 1;\n            if (script) partCount += 1;\n            return partCount;  \n        })()) return false;\n        const displayLanguageNames = new Intl.DisplayNames([libraryDefaultLocale], { type: 'language' });\n        if (displayLanguageNames.of(language) === language) return false;\n        if (region) {\n            const displayRegionNames = new Intl.DisplayNames([libraryDefaultLocale], { type: 'region' });\n            if (displayRegionNames.of(region) === region) return false;\n        }\n        if (script) {\n            const displayScriptNames = new Intl.DisplayNames([libraryDefaultLocale], { type: 'script' });\n            if (displayScriptNames.of(script) === script && !scriptExceptions.includes(script)) return false;\n        }\n        return true;\n    } catch {\n        return false;\n    }\n};\n\n/**\n * Standardizes a BCP 47 locale to ensure correct formatting.\n * @param {string} locale - The BCP 47 locale to standardize.\n * @returns {string} The standardized BCP 47 locale, or an empty string if invalid.\n * @internal\n */\nexport const _standardizeLocale = (locale: string): string => {\n    try {\n        return Intl.getCanonicalLocales(locale)[0];\n    } catch {\n        return locale;\n    }\n};","import { _standardizeLocale } from \"./isValidLocale\";\n\n\nfunction checkTwoLocalesAreSameDialect(codeA: string, codeB: string) {\n    const { language: languageA, region: regionA, script: scriptA } = new Intl.Locale(codeA);\n    const { language: languageB, region: regionB, script: scriptB } = new Intl.Locale(codeB);\n    if (languageA !== languageB) return false;\n    if (regionA && regionB && regionA !== regionB) return false;\n    if (scriptA && scriptB && scriptA !== scriptB) return false;\n    return true;\n}\n\n/**\n * Test two or more language codes to determine if they are exactly the same\n * e.g. \"en-US\" and \"en\" would be exactly the same.\n * \"en-GB\" and \"en\" would be exactly the same.\n * \"en-GB\" and \"en-US\" would be different.\n * @internal\n*/\nexport default function _isSameDialect(...locales: (string | string[])[]): boolean {\n    try {\n\n        // standardize codes\n        const flattenedCodes = locales.flat().map(_standardizeLocale);\n        \n        for (let i = 0; i < flattenedCodes.length; i++) {\n            for (let j = i + 1; j < flattenedCodes.length; j++) {\n                if (!checkTwoLocalesAreSameDialect(flattenedCodes[i], flattenedCodes[j])) return false;\n            } \n        }\n\n        return true;\n    } catch (error) {\n        console.error(error);\n        return false;\n    }\n}\n","/**\n * @internal\n */\nexport default function _isSameLanguage(...locales: (string | string[])[]): boolean {\n    try {\n        const flattenedCodes = locales.flat();\n        // Get the language for each code\n        const languages = flattenedCodes.map(locale => new Intl.Locale(locale).language);\n        return languages.every(language => language === languages[0]);\n    } catch (error) {\n        console.error(error);\n        return false;\n    }\n}\n","import { Content, ContentTranslationResult, TranslationError } from \"../../types\";\nimport { maxTimeout } from \"../../settings/settings\";\nimport { translateContentUrl } from \"../../settings/settingsUrls\";\n\n/**\n * @internal\n**/\nexport default async function _translate(\n    gt: { baseUrl: string; apiKey?: string, devApiKey?: string },\n    source: Content,\n    targetLocale: string,\n    metadata: { [key: string]: any }\n): Promise<ContentTranslationResult | TranslationError> {\n    const controller = new AbortController();\n    const signal = controller.signal;\n    \n    const timeout = Math.min(metadata?.timeout || maxTimeout, maxTimeout);\n    if (timeout) setTimeout(() => controller.abort(), timeout);\n\n    let response;\n    try {\n        response = await fetch(`${gt.baseUrl}${translateContentUrl}`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                ...(gt.apiKey && { 'x-gt-api-key': gt.apiKey }),\n                ...(gt.devApiKey && { 'x-gt-dev-api-key': gt.devApiKey })\n            },\n            body: JSON.stringify({\n                source, targetLocale, metadata\n            }),\n            signal\n        });\n    } catch (error: any) {\n        if (error?.name === 'AbortError') {\n            throw new Error('Translation request timed out. This has either occured due to the translation of an unusually large request or a translation failure in the API.');\n        }\n        throw error;\n    }\n\n    if (!response.ok) {\n        throw new Error(`${response.status}: ${await response.text()}`);\n    }\n    const result = await response.json();\n    return result as ContentTranslationResult | TranslationError;\n}\n\n","import { JsxChildren, JsxTranslationResult, TranslationError } from \"../../types\";\nimport { maxTimeout } from \"../../settings/settings\";\nimport { translateJsxUrl } from \"../../settings/settingsUrls\";\n\n/**\n * @internal\n**/\nexport default async function _translateJsx(\n    gt: { baseUrl: string; apiKey?: string, devApiKey?: string },\n    source: JsxChildren,\n    targetLocale: string,\n    metadata: { [key: string]: any }\n): Promise<JsxTranslationResult | TranslationError> {\n    const controller = new AbortController();\n    const signal = controller.signal;\n\n    const timeout = Math.min(metadata?.timeout || maxTimeout, maxTimeout);\n    if (timeout) setTimeout(() => controller.abort(), timeout);\n    let response;\n    try {\n        response = await fetch(`${gt.baseUrl}${translateJsxUrl}`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                ...(gt.apiKey && { 'x-gt-api-key': gt.apiKey }),\n                ...(gt.devApiKey && { 'x-gt-dev-api-key': gt.devApiKey })\n            },\n            body: JSON.stringify({\n                source, targetLocale, metadata\n            }),\n            signal\n        });\n    } catch (error: any) {\n        if (error?.name === 'AbortError') {\n            throw new Error('Translation request timed out. This has either occured due to the translation of an unusually large request or a translation failure in the API.');\n        }\n        throw error;\n    }\n\n    if (!response.ok) {\n        throw new Error(`${response.status}: ${await response.text()}`);\n    }\n    return await response.json() as JsxTranslationResult | TranslationError;\n}","import { libraryDefaultLocale } from \"../internal\";\n\n/**\n * Formats a number according to the specified locales and options.\n * \n * @param {Object} params - The parameters for the number formatting.\n * @param {number} params.value - The number to format.\n * @param {string | string[]} [params.locales=['en-US']] - The locales to use for formatting.\n * @param {Intl.NumberFormatOptions} [params.options={}] - Additional options for number formatting.\n * \n * @returns {string} The formatted number.\n * @internal\n */\nexport function _formatNum({\n    value,\n    locales = [libraryDefaultLocale],\n    options = {}\n}: {\n    value: number, locales?: string | string[]\n    options?: Intl.NumberFormatOptions\n}): string {\n    return new Intl.NumberFormat(locales, { numberingSystem: 'latn', ...options }).format(value);\n}\n\n/**\n * Formats a date according to the specified locales and options.\n * \n * @param {Object} params - The parameters for the date formatting.\n * @param {Date} params.value - The date to format.\n * @param {string | string[]} [params.locales=['en-US']] - The locales to use for formatting.\n * @param {Intl.DateTimeFormatOptions} [params.options={}] - Additional options for date formatting.\n * \n * @returns {string} The formatted date.\n * @internal\n */\nexport function _formatDateTime({\n    value,\n    locales = [libraryDefaultLocale],\n    options = {}\n}: {\n    value: Date, locales?: string | string[]\n    options?: Intl.DateTimeFormatOptions\n}): string {\n    return new Intl.DateTimeFormat(locales, { calendar: \"gregory\", numberingSystem: \"latn\", ...options }).format(value);\n}\n\n/**\n * Formats a currency value according to the specified locales, currency, and options.\n * \n * @param {Object} params - The parameters for the currency formatting.\n * @param {number} params.value - The currency value to format.\n * @param {string} params.currency - The currency code (e.g., 'USD').\n * @param {string | string[]} [params.locales=['en-US']] - The locales to use for formatting.\n * @param {Intl.NumberFormatOptions} [params.options={}] - Additional options for currency formatting.\n * \n * @returns {string} The formatted currency value.\n * @internal\n */\n\nexport function _formatCurrency({\n    value,\n    locales = [libraryDefaultLocale],\n    currency = 'USD',\n    options = {}\n}: {\n    value: number, \n    currency?: string,\n    locales?: string | string[]\n    options?: Intl.NumberFormatOptions\n}): string {\n    return new Intl.NumberFormat(locales, { style: 'currency', currency, numberingSystem: 'latn', ...options }).format(value);\n}\n\n/**\n * Formats a list of items according to the specified locales and options.\n * \n * @param {Object} params - The parameters for the list formatting.\n * @param {Array<string | number>} params.value - The list of items to format.\n * @param {string | string[]} [params.locales=['en-US']] - The locales to use for formatting.\n * @param {Intl.ListFormatOptions} [params.options={}] - Additional options for list formatting.\n * \n * @returns {string} The formatted list.\n * @internal\n */\nexport function _formatList({\n    value,\n    locales = [libraryDefaultLocale],\n    options = {}\n}: {\n    value: Array<any>,\n    locales?: string | string[],\n    options?: Intl.ListFormatOptions\n}): string {\n    return new Intl.ListFormat(locales, { \n        type: 'conjunction', // Default type, can be overridden via options\n        style: 'long',        // Default style, can be overridden via options\n        ...options \n    }).format(value);\n}\n\n/**\n * Formats a relative time value according to the specified locales and options.\n * \n * @param {Object} params - The parameters for the relative time formatting.\n * @param {number} params.value - The relative time value to format.\n * @param {Intl.RelativeTimeFormatUnit} params.unit - The unit of time (e.g., 'second', 'minute', 'hour', 'day', 'week', 'month', 'year').\n * @param {string | string[]} [params.locales=['en-US']] - The locales to use for formatting.\n * @param {Intl.RelativeTimeFormatOptions} [params.options={}] - Additional options for relative time formatting.\n * \n * @returns {string} The formatted relative time string.\n * @internal\n */\nexport function _formatRelativeTime({\n    value,\n    unit,\n    locales = [libraryDefaultLocale],\n    options = {}\n}: {\n    value: number,\n    unit: Intl.RelativeTimeFormatUnit,\n    locales?: string | string[],\n    options?: Intl.RelativeTimeFormatOptions\n}): string {\n    return new Intl.RelativeTimeFormat(locales, { style: \"long\", numeric: 'auto', ...options }).format(value, unit);\n}","import { libraryDefaultLocale } from '../internal';\nimport { Content, Variable } from '../types'\nimport { _formatCurrency, _formatDateTime, _formatNum, _formatList, _formatRelativeTime } from './format'\n\n// Variable types mapping\nconst variableTypeMap: { [key: string]: string } = {\n    var: \"variable\",\n    num: \"number\",\n    datetime: \"datetime\",\n    currency: \"currency\"\n};\n\n/** \n* @internal\n*/\n/** \n * @internal\n */\nexport function _splitStringToContent(string: string): Content {\n    if (typeof string !== 'string')\n        throw new Error(`splitStringToContent: ${string} is not a string!`)\n\n    const result: (string | Variable)[] = [];\n    const regex = /{([^}]+)}/g;\n    let lastIndex = 0;\n    let match: RegExpExecArray | null;\n\n    while ((match = regex.exec(string)) !== null) {\n        const [fullMatch, content] = match;\n        const startIndex = match.index;\n\n        // Check for escaped braces with '^' right before the opening brace\n        if (string[startIndex - 1] === \"^\") {\n            // Add text before the escape sequence\n            if (startIndex - 1 > lastIndex) {\n                result.push(string.slice(lastIndex, startIndex - 1));\n            }\n            // Add the escaped content as literal text\n            result.push(fullMatch);\n            lastIndex = startIndex + fullMatch.length;\n            continue;\n        }\n\n        // Add text before the match\n        if (startIndex > lastIndex) {\n            result.push(string.slice(lastIndex, startIndex));\n        }\n\n        // Handle the variable substitution inside the braces\n        const parts = content.split(\",\").map(part => part.trim());\n        const key = parts[0];\n        const variableType = parts[1] ? variableTypeMap[parts[1]] : undefined;\n\n        const variableObject: Variable = {\n            key,\n            ...(variableType && { variable: variableType })\n        };\n        result.push(variableObject);\n\n        lastIndex = startIndex + fullMatch.length;\n    }\n\n    // Add the remaining part of the string after the last match\n    if (lastIndex < string.length) {\n        result.push(string.slice(lastIndex));\n    }\n\n    return result;\n}\n\n\n/** \n* @internal\n*/\nexport function _renderContentToString(content: Content, locales: string | string[] = libraryDefaultLocale, variables: Record<string, any> = {}, variableOptions: Record<string, any> = {}): string {\n    if (typeof content === 'string')\n        content = _splitStringToContent(content);\n    if (typeof content === 'string')\n        return content;\n    if (!Array.isArray(content))\n        throw new Error(`renderContentToString: content ${content} is invalid`);\n    return content.map(item => {\n        if (typeof item === 'string') return item;\n        if (typeof item === 'object') {\n            const value = variables[item.key]\n            if (!item.variable) return value;\n            else if (item.variable === \"number\") {\n                return _formatNum({\n                    value, locales, \n                    options: variableOptions[item.key]\n                })\n            }\n            else if (item.variable === \"currency\") {\n                return _formatCurrency({\n                    value, locales, \n                    ...(variableOptions[item.key] && { options: variableOptions[item.key]}),\n                    ...(variableOptions[item.key]?.currency && { currency: variableOptions[item.key].currency })\n                })\n            }\n            else if (item.variable === \"datetime\") {\n                return _formatDateTime({\n                    value, locales, \n                    ...(variableOptions[item.key] && { options: variableOptions[item.key]}),\n                })\n            }\n            else if (item.variable === \"list\") {\n                return _formatList({\n                    value, locales, \n                    ...(variableOptions[item.key] && { options: variableOptions[item.key]}),\n                })\n            }\n            return value;\n        }\n    }).join('') \n}","import { _isValidLocale, _standardizeLocale } from \"./isValidLocale\";\n\n/**\n* @internal\n*/\nexport default function _getLocaleEmoji(\n    locale: string, \n    customMapping: Record<string, string> = {}\n): string {\n    if (!_isValidLocale(locale))\n        return defaultEmoji;\n\n    locale = _standardizeLocale(locale)\n\n    if (customMapping[locale]) return customMapping[locale];\n    \n    // if a region is specified, use it!\n    const localeObject = new Intl.Locale(locale);\n    const { region } = localeObject;\n    if (region && emojis[region]) return emojis[region];\n \n    // if not, attempt to extrapolate\n    const extrapolated = localeObject.maximize();\n    const extrapolatedRegion = extrapolated.region || '';\n\n    return (\n        exceptions[extrapolated.language] || \n        emojis[extrapolatedRegion] || \n        defaultEmoji\n    );\n}\n\n// Default language emoji for when none else can be found\nconst europeAfricaGlobe = \"🌍\";\nconst asiaAustraliaGlobe = \"🌏\";\nexport const defaultEmoji = europeAfricaGlobe;\n\n// Exceptions to better reflect linguistic and cultural identities\nconst exceptions = {\n    \"ca\": europeAfricaGlobe,\n    \"eu\": europeAfricaGlobe,\n    \"ku\": europeAfricaGlobe,\n    \"bo\": asiaAustraliaGlobe,\n    \"ug\": asiaAustraliaGlobe,\n    \"gd\": \"🏴󠁧󠁢󠁳󠁣󠁴󠁿\",\n    \"cy\": \"🏴󠁧󠁢󠁷󠁬󠁳󠁿\",\n    \"gv\": \"🇮🇲\",\n    \"grc\": \"🏺\"\n} as Record<string, string>;\n\nconst emojis = {\n    AF: '🇦🇫', // Afghanistan\n    AX: '🇦🇽', // Åland Islands\n    AL: '🇦🇱', // Albania\n    DZ: '🇩🇿', // Algeria\n    AS: '🇦🇸', // American Samoa\n    AD: '🇦🇩', // Andorra\n    AO: '🇦🇴', // Angola\n    AI: '🇦🇮', // Anguilla\n    AQ: '🇦🇶', // Antarctica\n    AG: '🇦🇬', // Antigua and Barbuda\n    AR: '🇦🇷', // Argentina\n    AM: '🇦🇲', // Armenia\n    AW: '🇦🇼', // Aruba\n    AU: '🇦🇺', // Australia\n    AT: '🇦🇹', // Austria\n    AZ: '🇦🇿', // Azerbaijan\n    BS: '🇧🇸', // Bahamas\n    BH: '🇧🇭', // Bahrain\n    BD: '🇧🇩', // Bangladesh\n    BB: '🇧🇧', // Barbados\n    BY: '🇧🇾', // Belarus\n    BE: '🇧🇪', // Belgium\n    BZ: '🇧🇿', // Belize\n    BJ: '🇧🇯', // Benin\n    BM: '🇧🇲', // Bermuda\n    BT: '🇧🇹', // Bhutan\n    BO: '🇧🇴', // Bolivia\n    BQ: '🇧🇶', // Bonaire, Sint Eustatius and Saba\n    BA: '🇧🇦', // Bosnia and Herzegovina\n    BW: '🇧🇼', // Botswana\n    BV: '🇧🇻', // Bouvet Island\n    BR: '🇧🇷', // Brazil\n    IO: '🇮🇴', // British Indian Ocean Territory\n    BN: '🇧🇳', // Brunei Darussalam\n    BG: '🇧🇬', // Bulgaria\n    BF: '🇧🇫', // Burkina Faso\n    BI: '🇧🇮', // Burundi\n    CV: '🇨🇻', // Cabo Verde\n    KH: '🇰🇭', // Cambodia\n    CM: '🇨🇲', // Cameroon\n    CA: '🇨🇦', // Canada\n    KY: '🇰🇾', // Cayman Islands\n    CF: '🇨🇫', // Central African Republic\n    TD: '🇹🇩', // Chad\n    CL: '🇨🇱', // Chile\n    CN: '🇨🇳', // China\n    CX: '🇨🇽', // Christmas Island\n    CC: '🇨🇨', // Cocos (Keeling) Islands\n    CO: '🇨🇴', // Colombia\n    KM: '🇰🇲', // Comoros\n    CD: '🇨🇩', // Congo (Democratic Republic)\n    CG: '🇨🇬', // Congo (Republic)\n    CK: '🇨🇰', // Cook Islands\n    CR: '🇨🇷', // Costa Rica\n    CI: '🇨🇮', // Côte d'Ivoire\n    HR: '🇭🇷', // Croatia\n    CU: '🇨🇺', // Cuba\n    CW: '🇨🇼', // Curaçao\n    CY: '🇨🇾', // Cyprus\n    CZ: '🇨🇿', // Czechia\n    DK: '🇩🇰', // Denmark\n    DJ: '🇩🇯', // Djibouti\n    DM: '🇩🇲', // Dominica\n    DO: '🇩🇴', // Dominican Republic\n    EC: '🇪🇨', // Ecuador\n    EG: '🇪🇬', // Egypt\n    SV: '🇸🇻', // El Salvador\n    GQ: '🇬🇶', // Equatorial Guinea\n    ER: '🇪🇷', // Eritrea\n    EE: '🇪🇪', // Estonia\n    SZ: '🇸🇿', // Eswatini\n    ET: '🇪🇹', // Ethiopia\n    FK: '🇫🇰', // Falkland Islands\n    FO: '🇫🇴', // Faroe Islands\n    FJ: '🇫🇯', // Fiji\n    FI: '🇫🇮', // Finland\n    FR: '🇫🇷', // France\n    GF: '🇬🇫', // French Guiana\n    PF: '🇵🇫', // French Polynesia\n    TF: '🇹🇫', // French Southern Territories\n    GA: '🇬🇦', // Gabon\n    GM: '🇬🇲', // Gambia\n    GE: '🇬🇪', // Georgia\n    DE: '🇩🇪', // Germany\n    GH: '🇬🇭', // Ghana\n    GI: '🇬🇮', // Gibraltar\n    GR: '🇬🇷', // Greece\n    GL: '🇬🇱', // Greenland\n    GD: '🇬🇩', // Grenada\n    GP: '🇬🇵', // Guadeloupe\n    GU: '🇬🇺', // Guam\n    GT: '🇬🇹', // Guatemala\n    GG: '🇬🇬', // Guernsey\n    GN: '🇬🇳', // Guinea\n    GW: '🇬🇼', // Guinea-Bissau\n    GY: '🇬🇾', // Guyana\n    HT: '🇭🇹', // Haiti\n    HM: '🇭🇲', // Heard Island and McDonald Islands\n    VA: '🇻🇦', // Holy See\n    HN: '🇭🇳', // Honduras\n    HK: '🇭🇰', // Hong Kong\n    HU: '🇭🇺', // Hungary\n    IS: '🇮🇸', // Iceland\n    IN: '🇮🇳', // India\n    ID: '🇮🇩', // Indonesia\n    IR: '🇮🇷', // Iran\n    IQ: '🇮🇶', // Iraq\n    IE: '🇮🇪', // Ireland\n    IM: '🇮🇲', // Isle of Man\n    IL: '🇮🇱', // Israel\n    IT: '🇮🇹', // Italy\n    JM: '🇯🇲', // Jamaica\n    JP: '🇯🇵', // Japan\n    JE: '🇯🇪', // Jersey\n    JO: '🇯🇴', // Jordan\n    KZ: '🇰🇿', // Kazakhstan\n    KE: '🇰🇪', // Kenya\n    KI: '🇰🇮', // Kiribati\n    KP: '🇰🇵', // Korea (North)\n    KR: '🇰🇷', // Korea (South)\n    KW: '🇰🇼', // Kuwait\n    KG: '🇰🇬', // Kyrgyzstan\n    LA: '🇱🇦', // Laos\n    LV: '🇱🇻', // Latvia\n    LB: '🇱🇧', // Lebanon\n    LS: '🇱🇸', // Lesotho\n    LR: '🇱🇷', // Liberia\n    LY: '🇱🇾', // Libya\n    LI: '🇱🇮', // Liechtenstein\n    LT: '🇱🇹', // Lithuania\n    LU: '🇱🇺', // Luxembourg\n    MO: '🇲🇴', // Macao\n    MG: '🇲🇬', // Madagascar\n    MW: '🇲🇼', // Malawi\n    MY: '🇲🇾', // Malaysia\n    MV: '🇲🇻', // Maldives\n    ML: '🇲🇱', // Mali\n    MT: '🇲🇹', // Malta\n    MH: '🇲🇭', // Marshall Islands\n    MQ: '🇲🇶', // Martinique\n    MR: '🇲🇷', // Mauritania\n    MU: '🇲🇺', // Mauritius\n    YT: '🇾🇹', // Mayotte\n    MX: '🇲🇽', // Mexico\n    FM: '🇫🇲', // Micronesia\n    MD: '🇲🇩', // Moldova\n    MC: '🇲🇨', // Monaco\n    MN: '🇲🇳', // Mongolia\n    ME: '🇲🇪', // Montenegro\n    MS: '🇲🇸', // Montserrat\n    MA: '🇲🇦', // Morocco\n    MZ: '🇲🇿', // Mozambique\n    MM: '🇲🇲', // Myanmar\n    NA: '🇳🇦', // Namibia\n    NR: '🇳🇷', // Nauru\n    NP: '🇳🇵', // Nepal\n    NL: '🇳🇱', // Netherlands\n    NC: '🇳🇨', // New Caledonia\n    NZ: '🇳🇿', // New Zealand\n    NI: '🇳🇮', // Nicaragua\n    NE: '🇳🇪', // Niger\n    NG: '🇳🇬', // Nigeria\n    NU: '🇳🇺', // Niue\n    NF: '🇳🇫', // Norfolk Island\n    MK: '🇲🇰', // North Macedonia\n    MP: '🇲🇵', // Northern Mariana Islands\n    NO: '🇳🇴', // Norway\n    OM: '🇴🇲', // Oman\n    PK: '🇵🇰', // Pakistan\n    PW: '🇵🇼', // Palau\n    PS: '🇵🇸', // Palestine, State of\n    PA: '🇵🇦', // Panama\n    PG: '🇵🇬', // Papua New Guinea\n    PY: '🇵🇾', // Paraguay\n    PE: '🇵🇪', // Peru\n    PH: '🇵🇭', // Philippines\n    PN: '🇵🇳', // Pitcairn\n    PL: '🇵🇱', // Poland\n    PT: '🇵🇹', // Portugal\n    PR: '🇵🇷', // Puerto Rico\n    QA: '🇶🇦', // Qatar\n    RE: '🇷🇪', // Réunion\n    RO: '🇷🇴', // Romania\n    RU: '🇷🇺', // Russian Federation\n    RW: '🇷🇼', // Rwanda\n    BL: '🇧🇱', // Saint Barthélemy\n    SH: '🇸🇭', // Saint Helena, Ascension and Tristan da Cunha\n    KN: '🇰🇳', // Saint Kitts and Nevis\n    LC: '🇱🇨', // Saint Lucia\n    MF: '🇲🇫', // Saint Martin (French part)\n    PM: '🇵🇲', // Saint Pierre and Miquelon\n    VC: '🇻🇨', // Saint Vincent and the Grenadines\n    WS: '🇼🇸', // Samoa\n    SM: '🇸🇲', // San Marino\n    ST: '🇸🇹', // São Tomé and Príncipe\n    SA: '🇸🇦', // Saudi Arabia\n    SN: '🇸🇳', // Senegal\n    RS: '🇷🇸', // Serbia\n    SC: '🇸🇨', // Seychelles\n    SL: '🇸🇱', // Sierra Leone\n    SG: '🇸🇬', // Singapore\n    SX: '🇸🇽', // Sint Maarten (Dutch part)\n    SK: '🇸🇰', // Slovakia\n    SI: '🇸🇮', // Slovenia\n    SB: '🇸🇧', // Solomon Islands\n    SO: '🇸🇴', // Somalia\n    ZA: '🇿🇦', // South Africa\n    GS: '🇬🇸', // South Georgia and the South Sandwich Islands\n    SS: '🇸🇸', // South Sudan\n    ES: '🇪🇸', // Spain\n    LK: '🇱🇰', // Sri Lanka\n    SD: '🇸🇩', // Sudan\n    SR: '🇸🇷', // Suriname\n    SJ: '🇸🇯', // Svalbard and Jan Mayen\n    SE: '🇸🇪', // Sweden\n    CH: '🇨🇭', // Switzerland\n    SY: '🇸🇾', // Syrian Arab Republic\n    TW: '🇹🇼', // Taiwan\n    TJ: '🇹🇯', // Tajikistan\n    TZ: '🇹🇿', // Tanzania\n    TH: '🇹🇭', // Thailand\n    TL: '🇹🇱', // Timor-Leste\n    TG: '🇹🇬', // Togo\n    TK: '🇹🇰', // Tokelau\n    TO: '🇹🇴', // Tonga\n    TT: '🇹🇹', // Trinidad and Tobago\n    TN: '🇹🇳', // Tunisia\n    TR: '🇹🇷', // Türkiye\n    TM: '🇹🇲', // Turkmenistan\n    TC: '🇹🇨', // Turks and Caicos Islands\n    TV: '🇹🇻', // Tuvalu\n    UG: '🇺🇬', // Uganda\n    UA: '🇺🇦', // Ukraine\n    AE: '🇦🇪', // United Arab Emirates\n    GB: '🇬🇧', // United Kingdom\n    US: '🇺🇸', // United States of America\n    UM: '🇺🇲', // United States Minor Outlying Islands\n    UY: '🇺🇾', // Uruguay\n    UZ: '🇺🇿', // Uzbekistan\n    VU: '🇻🇺', // Vanuatu\n    VE: '🇻🇪', // Venezuela\n    VN: '🇻🇳', // Viet Nam\n    VG: '🇻🇬', // Virgin Islands (British)\n    VI: '🇻🇮', // Virgin Islands (U.S.)\n    WF: '🇼🇫', // Wallis and Futuna\n    EH: '🇪🇭', // Western Sahara\n    YE: '🇾🇪', // Yemen\n    ZM: '🇿🇲', // Zambia\n    ZW: '🇿🇼', // Zimbabwe,\n    EU: '🇪🇺' // European Union (EU)\n} as Record<string, string>;","// `generaltranslation` language toolkit\n// © 2024, General Translation, Inc.\n\n// ----- IMPORTS ----- //\n\nimport _translateBatch from './api/batch/translateBatch';\nimport _requiresTranslation from './locales/requiresTranslation';\nimport _translate from './api/translate/translate';\nimport _translateJsx from './api/jsx/translateJsx';\nimport _updateProjectTranslations from './projects/updateProjectTranslations';\nimport _getProjectLocales from './projects/getProjectLocales';\nimport _determineLocale from './locales/determineLocale';\nimport { _formatNum, _formatCurrency, _formatList, _formatRelativeTime, _formatDateTime } from './formatting/format';\nimport { _splitStringToContent, _renderContentToString } from './formatting/string_content'\nimport { Content, Update, Request, JsxChildren, JsxTranslationResult, ContentTranslationResult, TranslationError } from './types'\nimport _isSameLanguage from './locales/isSameLanguage';\nimport _getLocaleProperties from './locales/getLocaleProperties';\nimport _getLocaleEmoji from './locales/getLocaleEmoji';\nimport { _isValidLocale, _standardizeLocale } from './locales/isValidLocale';\nimport { _getLocaleName } from './locales/getLocaleName';\nimport { _getLocaleDirection } from './locales/getLocaleDirection';\nimport { defaultBaseUrl, libraryDefaultLocale } from './internal';\nimport _isSameDialect from './locales/isSameDialect';\n\n// ----- HELPER FUNCTIONS ----- //\n\nconst getDefaultFromEnv = (VARIABLE: string): string => {\n    if (typeof process !== 'undefined' && process.env) {\n        return process.env[VARIABLE] || '';\n    }\n    return '';\n}\n\n// ----- CORE CLASS ----- // \n\n\n\n/**\n * Type representing the constructor parameters for the GT class.\n */\ntype GTConstructorParams = {\n    apiKey?: string;\n    devApiKey?: string;\n    sourceLocale?: string;\n    projectId?: string;\n    baseUrl?: string;\n};\n\n/**\n * GT is the core driver for the General Translation library.\n */\nclass GT {\n    apiKey: string;\n    devApiKey: string;\n    sourceLocale: string;\n    projectId: string;\n    baseUrl: string;\n\n    /**\n     * Constructs an instance of the GT class.\n     * \n     * @param {GTConstructorParams} [params] - The parameters for initializing the GT instance.\n     * @param {string} [params.apiKey=''] - The API key for accessing the translation service.\n     * @param {string} [params.sourceLocale='en-US'] - The default locale for translations.\n     * @param {string} [params.projectId=''] - The project ID for the translation service.\n     * @param {string} [params.baseUrl='https://api.gtx.dev'] - The base URL for the translation service.\n     */\n    constructor({\n        apiKey = '',\n        devApiKey = '',\n        sourceLocale = '',\n        projectId = '',\n        baseUrl = defaultBaseUrl\n    }: GTConstructorParams = {}) {\n        this.apiKey = apiKey || getDefaultFromEnv('GT_API_KEY');\n        this.devApiKey = devApiKey || getDefaultFromEnv('GT_DEV_API_KEY');\n        this.projectId = projectId || getDefaultFromEnv('GT_PROJECT_ID');\n        this.sourceLocale = _standardizeLocale(sourceLocale) || '';\n        this.baseUrl = baseUrl;\n    }\n\n    /**\n     * Translates a string or an array of strings/variables into a target locale.\n     * If `metadata.save` is provided, the translation is cached for use in a public project.\n     * \n     * @param {Content} source - The string or array of strings/variables to be translated.\n     * @param {string} locale - The target locale code (e.g., 'en-US', 'fr') for the translation.\n     * @param {{ context?: string, [key: string]: any }} [metadata] - Additional metadata for the translation request.\n     * @param {string} [metadata.context] - Contextual information to assist with the translation.\n     * \n     * @returns {Promise<ContentTranslationResult | TranslationError>} A promise that resolves to the translated content, or an error if the translation fails.\n     */\n    async translate(\n        source: Content, \n        locale: string, \n        metadata?: { \n            context?: string,\n            id?: string,\n            publish?: boolean,\n            fast?: boolean,\n            sourceLocale?: string,\n            [key: string]: any\n        }\n    ): Promise<ContentTranslationResult | TranslationError> {\n        return await _translate(this, source, locale, { sourceLocale: this.sourceLocale, ...metadata })\n    }\n\n    /**\n    * Translates JSX elements into a given locale.\n    * \n    * @param {Object} params - The parameters for the translation.\n    * @param {JsxChildren} params.source - The JSX children content to be translated.\n    * @param {string} params.locale - The target locale for the translation.\n    * @param {Object} params.metadata - Additional metadata for the translation process.\n    * \n    * @returns {Promise<JsxTranslationResult | TranslationError>} - A promise that resolves to the translated content.\n    */\n    async translateJsx(\n        source: JsxChildren, \n        locale: string, \n        metadata?: { \n            context?: string,\n            id?: string,\n            publish?: boolean,\n            fast?: boolean,\n            sourceLocale?: string,\n            [key: string]: any\n        }\n    ): Promise<JsxTranslationResult | TranslationError> {\n        return await _translateJsx(this, source, locale, { sourceLocale: this.sourceLocale, ...metadata });\n    }\n}\n\n// ----- EXPORTS ----- //\n\n/**\n * Get the text direction for a given locale code using the Intl.Locale API.\n * \n * @param {string} locale - The locale code to check.\n * @returns {string} - 'rtl' if the locale is right-to-left, otherwise 'ltr'.\n */\nexport function getLocaleDirection(locale: string): 'ltr' | 'rtl'  {\n    return _getLocaleDirection(locale);\n};\n\n/**\n * Retrieves the display name of locale code using Intl.DisplayNames.\n *\n * @param {string} locale - A BCP-47 locale code.\n * @param {string} [defaultLocale = 'en-US'] - The locale for display names.\n * @returns {string} The display name corresponding to the code.\n */\nexport function getLocaleName(locale: string, defaultLocale : string = libraryDefaultLocale): string {\n    return _getLocaleName(locale, defaultLocale);\n};\n\n/**\n * Generates linguistic details for a given locale code.\n *\n * This function returns information about the locale,\n * script, and region of a given language code both in a standard form and in a maximized form (with likely script and region).\n * The function provides these names in both your default language and native forms, and an associated emoji.\n *\n * @param {string} locale - The locale code to get properties for (e.g., \"de-AT\").\n * @param {string} [defaultLocale=libraryDefaultLocale] - The default locale code for display names.\n * @returns {LocaleProperties} - An object containing detailed information about the locale.\n *\n * @property {string} code - The full locale code, e.g., \"de-AT\".\n * @property {string} name - Language name in the default display language, e.g., \"Austrian German\".\n * @property {string} nativeName - Language name in the locale's native language, e.g., \"Österreichisches Deutsch\".\n * @property {string} languageCode - The base language code, e.g., \"de\".\n * @property {string} languageName - The language name in the default display language, e.g., \"German\".\n * @property {string} nativeLanguageName - The language name in the native language, e.g., \"Deutsch\".\n * @property {string} nameWithRegionCode - Language name with region in the default language, e.g., \"German (AT)\".\n * @property {string} nativeNameWithRegionCode - Language name with region in the native language, e.g., \"Deutsch (AT)\".\n * @property {string} regionCode - The region code from maximization, e.g., \"AT\".\n * @property {string} regionName - The region name in the default display language, e.g., \"Austria\".\n * @property {string} nativeRegionName - The region name in the native language, e.g., \"Österreich\".\n * @property {string} scriptCode - The script code from maximization, e.g., \"Latn\".\n * @property {string} scriptName - The script name in the default display language, e.g., \"Latin\".\n * @property {string} nativeScriptName - The script name in the native language, e.g., \"Lateinisch\".\n * @property {string} maximizedCode - The maximized locale code, e.g., \"de-Latn-AT\".\n * @property {string} maximizedName - Maximized locale name with likely script in the default language, e.g., \"Austrian German (Latin)\".\n * @property {string} nativeMaximizedName - Maximized locale name in the native language, e.g., \"Österreichisches Deutsch (Lateinisch)\".\n * @property {string} minimizedCode - Minimized locale code, e.g., \"de-AT\" (or \"de\" for \"de-DE\").\n * @property {string} minimizedName - Minimized language name in the default language, e.g., \"Austrian German\".\n * @property {string} nativeMinimizedName - Minimized language name in the native language, e.g., \"Österreichisches Deutsch\".\n * @property {string} emoji - The emoji associated with the locale's region, if applicable.\n*/\nexport function getLocaleProperties(locale: string, defaultLocale?: string): {\n    // assume code = \"de-AT\", defaultLocale = \"en-US\"\n    code: string; // \"de-AT\"\n    name: string; // \"Austrian German\"\n    nativeName: string; // \"Österreichisches Deutsch\"\n    languageCode: string; // \"de\"\n    languageName: string; // \"German\"\n    nativeLanguageName: string; // \"Deutsch\"\n    // note that maximize() is NOT called here!\n    nameWithRegionCode: string // \"German (AT)\"\n    nativeNameWithRegionCode: string // \"Deutsch (AT)\"\n    // for most likely script and region, maximize() is called\n    regionCode: string // \"AT\"\n    regionName: string // \"Austria\"\n    nativeRegionName: string // Österreich\n    scriptCode: string; // \"Latn\"\n    scriptName: string; // \"Latin\"\n    nativeScriptName: string; // \"Lateinisch\"\n    maximizedCode: string // \"de-Latn-AT\"\n    maximizedName: string // \"Austrian German (Latin)\"\n    nativeMaximizedName: string; // Österreichisches Deutsch (Lateinisch)\n    minimizedCode: string; // \"de-AT\", but for \"de-DE\" it would just be \"de\"\n    minimizedName: string; // \"\"Austrian German\";\n    nativeMinimizedName: string; // \"Österreichisches Deutsch\"\n    // Emoji depending on region code\n    // In order not to accidentally spark international conflict, some emojis are hard-coded\n    emoji: string; \n} {\n    return _getLocaleProperties(locale, defaultLocale)\n};\n\n/**\n * Retrieves an emoji based on a given locale code, taking into account region, language, and specific exceptions.\n * This function uses the locale's region (if present) to select an emoji or falls back on default emojis for certain languages.\n * \n * @param code - A string representing the locale code (e.g., 'en-US', 'fr-CA').\n * @param custom - An optional custom mapping of locale codes to emojis.\n * @returns The emoji representing the locale or its region, or a default emoji if no specific match is found.\n*/\nexport function getLocaleEmoji(locale: string, custom?: Record<string, string>) {\n    return _getLocaleEmoji(locale, custom);\n}\n\n\n/**\n * Checks if a given BCP 47 locale code is valid.\n * @param {string} locale - The BCP 47 locale code to validate.\n * @returns {boolean} True if the BCP 47 code is valid, false otherwise.\n */\nexport function isValidLocale(locale: string): boolean {\n    return _isValidLocale(locale);\n};\n\n/**\n * Standardizes a BCP 47 locale code to ensure correct formatting.\n * @param {string} locale - The BCP 47 locale code to standardize.\n * @returns {string} The standardized BCP 47 locale code or an empty string if it is an invalid code.\n */\nexport function standardizeLocale(locale: string): string {\n    return _standardizeLocale(locale);\n};\n\n/**\n * Checks if multiple BCP 47 locale codes represent the same dialect.\n * \n * For example, `\"en-US\"` and `\"en-GB\"` are the same language, but different dialects.\n * `isSameDialect(\"en-US\", \"en-GB\")` would return `false`.\n * \n * For checking if two locale codes represent the same language, see `isSameLanguage()`.\n * \n * Note that `isSameDialect(\"en\", \"en-US\")` and `isSameDialect(\"en\", \"en-GB\")` would both return true.\n * \n * @param {string[]} locales - The BCP 47 locale codes to compare.\n * @returns {boolean} True if all BCP 47 codes represent the same dialect, false otherwise.\n */\nexport function isSameDialect(...locales: (string | string[])[]): boolean {\n    return _isSameDialect(...locales)\n};\n\n/**\n * Checks if multiple BCP 47 locale codes represent the same language.\n * \n * For example, `\"en-US\"` and `\"en-GB\"` are the same language, English.\n * `isSameDialect(\"en-US\", \"en-GB\")` would return `true`.\n * \n * For checking if two codes represent the exact same dialect, see `isSameDialect()`.\n * \n * @param {string[]} locales - The BCP 47 locale codes to compare.\n * @returns {boolean} True if all BCP 47 codes represent the same locale, false otherwise.\n*/\nexport function isSameLanguage(...locales: (string | string[])[]): boolean {\n    return _isSameLanguage(...locales)\n};\n\n/**\n * Formats a number according to the specified locales and options.\n * @param {Object} params - The parameters for the number formatting.\n * @param {number} params.value - The number to format.\n * @param {string | string[]} [params.locales=['en-US']] - The locales to use for formatting.\n * @param {Intl.NumberFormatOptions} [params.options={}] - Additional options for number formatting.\n * @returns {string} The formatted number.\n */\nexport function formatNum(params: { value: number; locales?: string | string[]; options?: Intl.NumberFormatOptions }): string {\n    return _formatNum(params);\n};\n\n/**\n * Formats a date according to the specified languages and options.\n * @param {Object} params - The parameters for the date formatting.\n * @param {Date} params.value - The date to format.\n * @param {string | string[]} [params.locales=['en-US']] - The languages to use for formatting.\n * @param {Intl.DateTimeFormatOptions} [params.options={}] - Additional options for date formatting.\n * @returns {string} The formatted date.\n */\nexport function formatDateTime(params: { value: Date; locales?: string | string[]; options?: Intl.DateTimeFormatOptions }): string {\n    return _formatDateTime(params);\n};\n\n/**\n * Formats a currency value according to the specified languages, currency, and options.\n * @param {Object} params - The parameters for the currency formatting.\n * @param {number} params.value - The currency value to format.\n * @param {string} params.currency - The currency code (e.g., 'USD').\n * @param {string | string[]} [params.locales=['en-US']] - The locale codes to use for formatting.\n * @param {Intl.NumberFormatOptions} [params.options={}] - Additional options for currency formatting.\n * @returns {string} The formatted currency value.\n */\nexport function formatCurrency(params: { value: number; currency: string; locales?: string | string[]; options?: Intl.NumberFormatOptions }): string {\n    return _formatCurrency(params);\n};\n\n/**\n * Formats a list of items according to the specified locales and options.\n * @param {Object} params - The parameters for the list formatting.\n * @param {Array<string | number>} params.value - The list of items to format.\n * @param {string | string[]} [params.locales=['en-US']] - The locales to use for formatting.\n * @param {Intl.ListFormatOptions} [params.options={}] - Additional options for list formatting.\n * @returns {string} The formatted list.\n */\nexport function formatList(params: { value: Array<string | number>; locales?: string | string[]; options?: Intl.ListFormatOptions }) {\n    return _formatList(params);\n};\n\n/**\n * Formats a relative time value according to the specified locales and options.\n * @param {Object} params - The parameters for the relative time formatting.\n * @param {number} params.value - The relative time value to format.\n * @param {Intl.RelativeTimeFormatUnit} params.unit - The unit of time (e.g., 'second', 'minute', 'hour', 'day', 'week', 'month', 'year').\n * @param {string | string[]} [params.locales=['en-US']] - The locales to use for formatting.\n * @param {Intl.RelativeTimeFormatOptions} [params.options={}] - Additional options for relative time formatting.\n * @returns {string} The formatted relative time string.\n */\nexport function formatRelativeTime(params: { value: number; unit: Intl.RelativeTimeFormatUnit; locales?: string | string[]; options?: Intl.RelativeTimeFormatOptions }): string {\n    return _formatRelativeTime(params);\n};\n\n/**\n * Splits a string into an array of text and variable objects.\n * @param {string} string - The input string to split.\n * @returns {Content} - An array containing strings and variables.\n */\nexport function splitStringToContent(string: string): Content {\n    return _splitStringToContent(string);\n};\n\n/**\n * Renders content to a string by replacing variables with their formatted values.\n * @param {Content} content - The content to render.\n * @param {string | string[]} [locales='en-US'] - The locale(s) to use for formatting.\n * @param {Record<string, any>} [variables={}] - An object containing variable values.\n * @param {Record<string, any>} [variableOptions={}] - An object containing options for formatting variables.\n * @returns {string} - The rendered string with variables replaced by their formatted values.\n */\nexport function renderContentToString(content: Content, locales?: string | string[], variables?: Record<string, any>, variableOptions?: Record<string, any>): string {\n    return _renderContentToString(content, locales, variables, variableOptions)\n};\n\n/**\n * Determines the best matching locale from the provided approved locales list.\n * @param {string | string[]} locales - A single locale or an array of locales sorted in preference order.\n * @param {string[]} approvedLocales - An array of approved locales, also sorted by preference.\n * @returns {string | undefined} - The best matching locale from the approvedLocales list, or undefined if no match is found.\n */\nexport function determineLocale(locales: string | string[], approvedLocales: string[]): string | undefined {\n    return _determineLocale(locales, approvedLocales);\n};\n\n/**\n * Determines whether a translation is required based on the source and target locales.\n * \n * - If the target locale is not specified, the function returns `false`, as translation is not needed.\n * - If the source and target locale are the same, returns `false`, indicating that no translation is necessary.\n * - If the `approvedLocales` array is provided, and the target locale is not within that array, the function also returns `false`.\n * - Otherwise, it returns `true`, meaning that a translation is required.\n * \n * @param {string} sourceLocale - The locale code for the original content (BCP 47 locale code).\n * @param {string} targetLocale - The locale code of the language to translate the content into (BCP 47 locale code).\n * @param {string[]} [approvedLocale] - An optional array of approved target locales.\n * \n * @returns {boolean} - Returns `true` if translation is required, otherwise `false`.\n */\nexport function requiresTranslation(sourceLocale: string, targetLocale: string, approvedLocales?: string[]): boolean {\n    return _requiresTranslation(sourceLocale, targetLocale, approvedLocales);\n};\n\n// DEFAULT EXPORT\n\nexport default GT;","import { _isValidLocale, _standardizeLocale } from './isValidLocale';\nimport _isSameLanguage from './isSameLanguage';\nimport _isSameDialect from './isSameDialect';\n\n/**\n * Given a list of locales and a list of approved locales, sorted in preference order\n * Determines which locale is the best match among the approved locales, prioritizing exact matches and falling back to dialects of the same language\n* @internal\n*/\nexport default function _determineLocale(\n    locales: string | string[], approvedLocales: string[]\n): string | undefined {\n    if (typeof locales === 'string')\n        locales = [locales];\n    locales = locales.filter(_isValidLocale);\n    approvedLocales = approvedLocales.filter(_isValidLocale);\n    if (!approvedLocales) return locales[0];\n    for (const locale of locales) {\n        if (!_isValidLocale(locale)) continue;\n        const currentLocale = _standardizeLocale(locale)\n        const candidates: string[] = [];\n        for (const approvedLocale of approvedLocales) {\n            const currentApprovedLocale = _standardizeLocale(approvedLocale);\n            if (currentLocale === currentApprovedLocale) \n                return currentApprovedLocale; // instant match! return\n            if (_isSameLanguage(currentLocale, currentApprovedLocale)) \n                candidates.push(currentApprovedLocale); // covers same dialect as well\n        }\n        if (candidates.length) \n            return candidates.find(candidate => _isSameDialect(currentLocale, candidate)) || \n                candidates[0];\n    }\n    return undefined;\n}","/**\n * Get the text direction for a given locale code using the Intl.Locale API.\n * \n * @param {string} code - The locale code to check.\n * @returns {string} - 'rtl' if the language is right-to-left, otherwise 'ltr'.\n * @internal\n */\nexport function _getLocaleDirection(code: string): 'ltr' | 'rtl' {\n    try {\n        const locale = new Intl.Locale(code);\n        // Return 'rtl' if the text direction of the language is right-to-left, otherwise 'ltr'\n        return (locale as any)?.textInfo?.direction === 'rtl' ? 'rtl' : 'ltr';\n    } catch {\n        // If the code is invalid or causes an error, fallback to 'ltr'\n        return 'ltr';\n    }\n}\n","import { libraryDefaultLocale } from \"../internal\";\n\n/**\n * Retrieves the display name(s) of language code(s) using Intl.DisplayNames.\n *\n * @param {string} code - A language code.\n * @param {string} [defaultLanguage=libraryDefaultLanguage] - The language for display names.\n * @returns {string} The display name(s) corresponding to the code(s), or empty string(s) if invalid.\n * @internal\n*/\nexport function _getLocaleName(code: string, defaultLanguage: string = libraryDefaultLocale): string {\n    try {\n        const displayNames = new Intl.DisplayNames([defaultLanguage, libraryDefaultLocale], { type: 'language' });\n        return displayNames.of(code) || '';\n    } catch {\n        // In case Intl.DisplayNames construction fails, return empty string(s)\n        return '';\n    }\n}","import { libraryDefaultLocale } from \"../internal\";\nimport _getLocale from \"./getLocaleEmoji\";\nimport { _isValidLocale, _standardizeLocale } from \"./isValidLocale\";\nimport _getLocaleEmoji from \"./getLocaleEmoji\";\n\ntype LocaleProperties = {\n    \n    // assume code = \"de-AT\", defaultLocale = \"en-US\"\n\n    code: string; // \"de-AT\"\n    name: string; // \"Austrian German\"\n    nativeName: string; // \"Österreichisches Deutsch\"\n\n    languageCode: string; // \"de\"\n    languageName: string; // \"German\"\n    nativeLanguageName: string; // \"Deutsch\"\n\n    // note that maximize() is NOT called here!\n    \n    nameWithRegionCode: string // \"German (AT)\"\n    nativeNameWithRegionCode: string // \"Deutsch (AT)\"\n\n    // for most likely script and region, maximize() is called\n \n    regionCode: string // \"AT\"\n    regionName: string // \"Austria\"\n    nativeRegionName: string // Österreich\n\n    scriptCode: string; // \"Latn\"\n    scriptName: string; // \"Latin\"\n    nativeScriptName: string; // \"Lateinisch\"\n\n    maximizedCode: string // \"de-Latn-AT\"\n    maximizedName: string // \"Austrian German (Latin)\"\n    nativeMaximizedName: string; // Österreichisches Deutsch (Lateinisch)\n\n    minimizedCode: string; // \"de-AT\", but for \"de-DE\" it would just be \"de\"\n    minimizedName: string; // \"\"Austrian German\";\n    nativeMinimizedName: string; // \"Österreichisches Deutsch\"\n\n    // Emoji depending on region code\n    // In order not to accidentally spark international conflict, some emojis are hard-coded\n    emoji: string; \n}\n\n/**\n* @internal\n*/\nexport default function _getLocaleProperties(\n    locale: string, defaultLocale: string = libraryDefaultLocale\n): LocaleProperties {\n    try {\n\n        locale = _standardizeLocale(locale); // \"de-AT\"\n\n        const localeObject = new Intl.Locale(locale);\n        const languageCode = localeObject.language; // \"de\"\n        const baseRegion = localeObject.region; // \"AT\"\n        \n        const maximizedLocale = new Intl.Locale(locale).maximize(); \n        const maximizedCode = maximizedLocale.toString(); // \"de-Latn-AT\"\n        const regionCode = maximizedLocale.region || ''; // \"AT\"\n        const scriptCode = maximizedLocale.script || ''; // \"Latn\"\n        \n        const minimizedLocale = new Intl.Locale(locale).minimize();\n        const minimizedCode = minimizedLocale.toString(); // \"de-AT\"\n\n        // Language names (default and native)\n\n        const languageNames = new Intl.DisplayNames([defaultLocale, locale, libraryDefaultLocale], { type: 'language' });\n        const nativeLanguageNames = new Intl.DisplayNames([locale, defaultLocale, libraryDefaultLocale], { type: 'language' });\n\n        const name = languageNames.of(locale) || locale; // \"Austrian German\"\n        const nativeName = nativeLanguageNames.of(locale) || locale; // \"Österreichisches Deutsch\"\n        \n        const maximizedName = languageNames.of(maximizedCode) || locale; // \"Austrian German (Latin)\"\n        const nativeMaximizedName = nativeLanguageNames.of(maximizedCode) || locale; // \"Österreichisches Deutsch (Lateinisch)\"\n        \n        const minimizedName = languageNames.of(minimizedCode) || locale; // \"Austrian German\", but for \"de-DE\" would just be \"German\"\n        const nativeMinimizedName = nativeLanguageNames.of(minimizedCode) || locale; // \"Österreichisches Deutsch\", but for \"de-DE\" would just be \"Deutsch\"\n        \n        const languageName = languageNames.of(languageCode) || locale; // \"German\"\n        const nativeLanguageName = nativeLanguageNames.of(languageCode) || locale; // \"Deutsch\"\n\n        const nameWithRegionCode = baseRegion ? `${languageName} (${baseRegion})`: languageName; // German (AT)\n        const nativeNameWithRegionCode = baseRegion ? `${nativeLanguageName} (${baseRegion})`: nativeLanguageName; // \"Deutsch (AT)\"\n\n        // Region names (default and native)\n\n        const regionNames = new Intl.DisplayNames([defaultLocale, locale, libraryDefaultLocale], { type: 'region' });\n        const nativeRegionNames = new Intl.DisplayNames([locale, defaultLocale, libraryDefaultLocale], { type: 'region' });\n\n        const regionName = regionNames.of(regionCode) || ''; // \"Austria\"\n        const nativeRegionName = nativeRegionNames.of(regionCode) || ''; // \"Österreich\"\n\n        // Script names (default and native)\n\n        const scriptNames = new Intl.DisplayNames([defaultLocale, locale, libraryDefaultLocale], { type: 'script' }); \n        const nativeScriptNames = new Intl.DisplayNames([locale, defaultLocale, libraryDefaultLocale], { type: 'script' }); \n\n        const scriptName = scriptNames.of(scriptCode) || ''; // \"Latin\"\n        const nativeScriptName = nativeScriptNames.of(scriptCode) || ''; // \"Lateinisch\"\n\n        // Emoji \n\n        const emoji = _getLocaleEmoji(locale);\n\n        return {\n            code: locale, name, nativeName,\n            maximizedCode, maximizedName, nativeMaximizedName,\n            minimizedCode, minimizedName, nativeMinimizedName,\n            languageCode, languageName, nativeLanguageName,\n            nameWithRegionCode, nativeNameWithRegionCode,\n            regionCode, regionName, nativeRegionName,\n            scriptCode, scriptName, nativeScriptName,\n            emoji\n        }\n    } catch (error) {\n        \n        const code = locale || '';\n        const codeParts = code?.split('-');\n        const languageCode = codeParts?.[0] || code || '';\n        const regionCode = codeParts.length > 2 ? codeParts?.[2] : codeParts?.[1] || '';\n        const scriptCode = codeParts?.[3] || '';\n        const nameWithRegionCode = languageCode ? (regionCode ? `${languageCode} (${regionCode})` : languageCode) : '';\n        \n        return {\n            code, name: code, nativeName: code, \n            maximizedCode: code, maximizedName: code, nativeMaximizedName: code,\n            minimizedCode: code, minimizedName: code, nativeMinimizedName: code,\n            languageCode, languageName: languageCode, nativeLanguageName: languageCode,\n            regionCode, regionName: regionCode, nativeRegionName: regionCode,\n            scriptCode, scriptName: scriptCode, nativeScriptName: scriptCode,\n            nameWithRegionCode, nativeNameWithRegionCode: code,\n            emoji: _getLocaleEmoji(code)\n        }\n    }\n\n}","import _isSameDialect from \"./isSameDialect\";\nimport _isSameLanguage from \"./isSameLanguage\";\nimport { _isValidLocale, _standardizeLocale } from \"./isValidLocale\";\n\n\n/**\n * Given a target locale and a source locale, determines whether a translation is required\n * If the target locale and the source locale are the same, returns false, otherwise returns true\n * If a translation is not possible due to the target locale being outside of the optional approvedLanguages scope, also returns false\n * @internal\n*/\nexport default function _requiresTranslation(\n    sourceLocale: string, targetLocale: string, approvedLocales?: string[]\n): boolean {\n\n    // If codes are invalid\n    if (!_isValidLocale(sourceLocale) ||\n        !_isValidLocale(targetLocale) || \n        (approvedLocales && approvedLocales.some(approvedLocale => !_isValidLocale(approvedLocale)))\n    ) return false;\n\n    // Check if the languages are identical, if so, a translation is not required\n    if (_isSameDialect(sourceLocale, targetLocale)) return false;\n    \n    // Check that the target locale is within the approvedLocales scope, if not, a translation is not required\n    // isSameLanguage rather than checkTwoLocalesAreSameDialect so we can show different dialects as a fallback\n    if (approvedLocales && !approvedLocales.some(approvedLocale => _isSameLanguage(targetLocale, approvedLocale))) return false;\n    \n    // Otherwise, a translation is required!\n    return true;\n}"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","__generator","body","f","y","_","label","sent","trys","ops","g","create","Iterator","verb","Symbol","iterator","v","op","TypeError","pop","push","SuppressedError","libraryDefaultLocale","maxTimeout","scriptExceptions","_isValidLocale","locale","_a","Intl","Locale","language","region_1","script_1","split","partCount","DisplayNames","type","of","includes","_b","_standardizeLocale","getCanonicalLocales","_isSameDialect","codeA","codeB","languageA","regionA","scriptA","languageB","regionB","scriptB","locales","_i","flattenedCodes","flat","map","j","error","console","_isSameLanguage","languages_1","every","_translate","gt","source","targetLocale","metadata","controller","AbortController","signal","timeout","Math","min","setTimeout","abort","fetch","concat","baseUrl","method","headers","apiKey","devApiKey","JSON","stringify","response","_d","error_1","name","Error","ok","bind","_c","status","text","json","_translateJsx","_formatNum","options","NumberFormat","numberingSystem","format","_formatDateTime","DateTimeFormat","calendar","_formatCurrency","currency","style","_formatList","ListFormat","variableTypeMap","var","num","datetime","_splitStringToContent","string","match","regex","lastIndex","exec","fullMatch","content","startIndex","index","slice","parts","part","trim","key","variableType","undefined","variableObject","variable","_getLocaleEmoji","customMapping","defaultEmoji","localeObject","region","emojis","extrapolated","maximize","extrapolatedRegion","exceptions","europeAfricaGlobe","ca","eu","ku","bo","ug","gd","cy","gv","grc","AF","AX","AL","DZ","AS","AD","AO","AI","AQ","AG","AR","AM","AW","AU","AT","AZ","BS","BH","BD","BB","BY","BE","BZ","BJ","BM","BT","BO","BQ","BA","BW","BV","BR","IO","BN","BG","BF","BI","CV","KH","CM","CA","KY","CF","TD","CL","CN","CX","CC","CO","KM","CD","CG","CK","CR","CI","HR","CU","CW","CY","CZ","DK","DJ","DM","DO","EC","EG","SV","GQ","ER","EE","SZ","ET","FK","FO","FJ","FI","FR","GF","PF","TF","GA","GM","GE","DE","GH","GI","GR","GL","GD","GP","GU","GT","GG","GN","GW","GY","HT","HM","VA","HN","HK","HU","IS","IN","ID","IR","IQ","IE","IM","IL","IT","JM","JP","JE","JO","KZ","KE","KI","KP","KR","KW","KG","LA","LV","LB","LS","LR","LY","LI","LT","LU","MO","MG","MW","MY","MV","ML","MT","MH","MQ","MR","MU","YT","MX","FM","MD","MC","MN","ME","MS","MA","MZ","MM","NA","NR","NP","NL","NC","NZ","NI","NE","NG","NU","NF","MK","MP","NO","OM","PK","PW","PS","PA","PG","PY","PE","PH","PN","PL","PT","PR","QA","RE","RO","RU","RW","BL","SH","KN","LC","MF","PM","VC","WS","SM","ST","SA","SN","RS","SC","SL","SG","SX","SK","SI","SB","SO","ZA","GS","SS","ES","LK","SD","SR","SJ","SE","CH","SY","TW","TJ","TZ","TH","TL","TG","TK","TO","TT","TN","TR","TM","TC","TV","UG","UA","AE","GB","US","UM","UY","UZ","VU","VE","VN","VG","VI","WF","EH","YE","ZM","ZW","EU","getDefaultFromEnv","VARIABLE","process","env","_e","sourceLocale","_f","projectId","_g","translate","translateJsx","approvedLocales","filter","currentLocale","candidates","approvedLocales_1","approvedLocale","currentApprovedLocale","find","candidate","locales_1","_determineLocale","params","unit","RelativeTimeFormat","numeric","code","textInfo","direction","_getLocaleDirection","custom","defaultLocale","defaultLanguage","_getLocaleName","languageCode","baseRegion","maximizedLocale","maximizedCode","toString","regionCode","scriptCode","script","minimizedCode","minimize","languageNames","nativeLanguageNames","nativeName","maximizedName","nativeMaximizedName","minimizedName","nativeMinimizedName","languageName","nativeLanguageName","nameWithRegionCode","nativeNameWithRegionCode","regionNames","nativeRegionNames","regionName","nativeRegionName","scriptNames","nativeScriptNames","scriptName","nativeScriptName","emoji","codeParts","_getLocaleProperties","variables","variableOptions","Array","isArray","item","join","_renderContentToString","some","_requiresTranslation"],"mappings":"oEA+BO,IAAIA,EAAW,WAQlB,OAPAA,EAAWC,OAAOC,QAAU,SAAkBC,GAC1C,IAAK,IAAIC,EAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAE5C,IAAK,IAAII,KADTL,EAAIG,UAAUF,GACOJ,OAAOS,UAAUC,eAAeC,KAAKR,EAAGK,KAAIN,EAAEM,GAAKL,EAAEK,IAE9E,OAAON,CACV,EACMH,EAASa,MAAMC,KAAMP,UAChC,EA0EO,SAASQ,EAAUC,EAASC,EAAYC,EAAGC,GAE9C,OAAO,IAAKD,IAAMA,EAAIE,WAAU,SAAUC,EAASC,GAC/C,SAASC,EAAUC,GAAS,IAAMC,EAAKN,EAAUO,KAAKF,GAAQ,CAAG,MAAOG,GAAKL,EAAOK,GAAO,CAC3F,SAASC,EAASJ,GAAS,IAAMC,EAAKN,EAAiB,MAAEK,GAAU,CAAC,MAAOG,GAAKL,EAAOK,GAAO,CAC9F,SAASF,EAAKI,GAJlB,IAAeL,EAIaK,EAAOC,KAAOT,EAAQQ,EAAOL,QAJ1CA,EAIyDK,EAAOL,MAJhDA,aAAiBN,EAAIM,EAAQ,IAAIN,GAAE,SAAUG,GAAWA,EAAQG,EAAO,KAIhBO,KAAKR,EAAWK,EAAY,CAC9GH,GAAMN,EAAYA,EAAUN,MAAMG,EAASC,GAAc,KAAKS,OACtE,GACA,CAEO,SAASM,EAAYhB,EAASiB,GACjC,IAAsGC,EAAGC,EAAGhC,EAAxGiC,EAAI,CAAEC,MAAO,EAAGC,KAAM,WAAa,GAAW,EAAPnC,EAAE,GAAQ,MAAMA,EAAE,GAAI,OAAOA,EAAE,EAAG,EAAIoC,KAAM,GAAIC,IAAK,IAAeC,EAAIxC,OAAOyC,QAA4B,mBAAbC,SAA0BA,SAAW1C,QAAQS,WACtL,OAAO+B,EAAEf,KAAOkB,EAAK,GAAIH,EAAS,MAAIG,EAAK,GAAIH,EAAU,OAAIG,EAAK,GAAsB,mBAAXC,SAA0BJ,EAAEI,OAAOC,UAAY,WAAa,OAAOhC,IAAO,GAAG2B,EAC1J,SAASG,EAAKtC,GAAK,OAAO,SAAUyC,GAAK,OACzC,SAAcC,GACV,GAAId,EAAG,MAAM,IAAIe,UAAU,mCAC3B,KAAOR,IAAMA,EAAI,EAAGO,EAAG,KAAOZ,EAAI,IAAKA,OACnC,GAAIF,EAAI,EAAGC,IAAMhC,EAAY,EAAR6C,EAAG,GAASb,EAAU,OAAIa,EAAG,GAAKb,EAAS,SAAOhC,EAAIgC,EAAU,SAAMhC,EAAES,KAAKuB,GAAI,GAAKA,EAAET,SAAWvB,EAAIA,EAAES,KAAKuB,EAAGa,EAAG,KAAKlB,KAAM,OAAO3B,EAE3J,OADIgC,EAAI,EAAGhC,IAAG6C,EAAK,CAAS,EAARA,EAAG,GAAQ7C,EAAEqB,QACzBwB,EAAG,IACP,KAAK,EAAG,KAAK,EAAG7C,EAAI6C,EAAI,MACxB,KAAK,EAAc,OAAXZ,EAAEC,QAAgB,CAAEb,MAAOwB,EAAG,GAAIlB,MAAM,GAChD,KAAK,EAAGM,EAAEC,QAASF,EAAIa,EAAG,GAAIA,EAAK,CAAC,GAAI,SACxC,KAAK,EAAGA,EAAKZ,EAAEI,IAAIU,MAAOd,EAAEG,KAAKW,MAAO,SACxC,QACI,KAAM/C,EAAIiC,EAAEG,MAAMpC,EAAIA,EAAEK,OAAS,GAAKL,EAAEA,EAAEK,OAAS,KAAkB,IAAVwC,EAAG,IAAsB,IAAVA,EAAG,IAAW,CAAEZ,EAAI,EAAG,QAAW,CAC5G,GAAc,IAAVY,EAAG,MAAc7C,GAAM6C,EAAG,GAAK7C,EAAE,IAAM6C,EAAG,GAAK7C,EAAE,IAAM,CAAEiC,EAAEC,MAAQW,EAAG,GAAI,KAAQ,CACtF,GAAc,IAAVA,EAAG,IAAYZ,EAAEC,MAAQlC,EAAE,GAAI,CAAEiC,EAAEC,MAAQlC,EAAE,GAAIA,EAAI6C,EAAI,KAAQ,CACrE,GAAI7C,GAAKiC,EAAEC,MAAQlC,EAAE,GAAI,CAAEiC,EAAEC,MAAQlC,EAAE,GAAIiC,EAAEI,IAAIW,KAAKH,GAAK,KAAQ,CAC/D7C,EAAE,IAAIiC,EAAEI,IAAIU,MAChBd,EAAEG,KAAKW,MAAO,SAEtBF,EAAKf,EAAKrB,KAAKI,EAASoB,EAC3B,CAAC,MAAOT,GAAKqB,EAAK,CAAC,EAAGrB,GAAIQ,EAAI,CAAE,CAAW,QAAED,EAAI/B,EAAI,CAAI,CAC1D,GAAY,EAAR6C,EAAG,GAAQ,MAAMA,EAAG,GAAI,MAAO,CAAExB,MAAOwB,EAAG,GAAKA,EAAG,QAAK,EAAQlB,MAAM,EAC7E,CAtB+CL,CAAK,CAACnB,EAAGyC,GAAM,CAAG,CAuBtE,CAyKkD,mBAApBK,iBAAiCA,gBC9TxD,ICDMC,EAAuB,QAGvBC,EAAa,ICDpBC,EAAmB,CACrB,OACA,OACA,OACA,OACA,OACA,QASSC,EAAiB,SAACC,GAC3B,IACU,IAAAC,EAA+B,IAAIC,KAAKC,OAAOH,GAA7CI,aAAUC,WAAQC,WAC1B,GAAIN,EAAOO,MAAM,KAAKxD,UACdyD,EAAY,EACZH,IAAQG,GAAa,GACrBF,IAAQE,GAAa,GAClBA,GACL,OAAO,EAEb,GAD6B,IAAIN,KAAKO,aAAa,CAACb,GAAuB,CAAEc,KAAM,aAC1DC,GAAGP,KAAcA,EAAU,OAAO,EAC3D,GAAIC,EAEA,GAD2B,IAAIH,KAAKO,aAAa,CAACb,GAAuB,CAAEc,KAAM,WAC1DC,GAAGN,KAAYA,EAAQ,OAAO,EAEzD,GAAIC,EAEA,GAD2B,IAAIJ,KAAKO,aAAa,CAACb,GAAuB,CAAEc,KAAM,WAC1DC,GAAGL,KAAYA,IAAWR,EAAiBc,SAASN,GAAS,OAAO,EAE/F,OAAO,CACV,CAAC,MAAAO,GACE,OAAO,CACV,CAnBoC,IACzBL,CAmBhB,EAQaM,EAAqB,SAACd,GAC/B,IACI,OAAOE,KAAKa,oBAAoBf,GAAQ,EAC3C,CAAC,MAAAC,GACE,OAAOD,CACV,CACL,ECnCc,SAAUgB,QAAe,IAhBAC,EAAeC,EAC5CjB,EAAYkB,EAAmBC,EAAiBC,EAChDR,EAAYS,EAAmBC,EAAiBC,EAccC,EAAA,GAAAC,EAAA,EAAjCA,EAAiC5E,UAAAC,OAAjC2E,IAAAD,EAAiCC,GAAA5E,UAAA4E,GACpE,IAKI,IAFA,IAAMC,EAAiBF,EAAQG,OAAOC,IAAIf,GAEjClE,EAAI,EAAGA,EAAI+E,EAAe5E,OAAQH,IACvC,IAAK,IAAIkF,EAAIlF,EAAI,EAAGkF,EAAIH,EAAe5E,OAAQ+E,IAC3C,GAxBuBb,EAwBYU,EAAe/E,GAxBZsE,EAwBgBS,EAAeG,GAvB3E7B,SAAYkB,SAAmBC,SAAiBC,SAChDR,SAAYS,SAAmBC,SAAiBC,SADhDvB,EAA4D,IAAIC,KAAKC,OAAOc,GAAhEE,aAAmBC,WAAiBC,WAChDR,EAA4D,IAAIX,KAAKC,OAAOe,GAAhEI,aAAmBC,WAAiBC,WAClDL,IAAcG,GACdF,GAAWG,GAAWH,IAAYG,GAClCF,GAAWG,GAAWH,IAAYG,EAmBgD,OAAO,EAIzF,OAAO,CACV,CAAC,MAAOO,GAEL,OADAC,QAAQD,MAAMA,IACP,CACV,CACL,CCjCc,SAAUE,QAAgB,IAAiCR,EAAA,GAAAC,EAAA,EAAjCA,EAAiC5E,UAAAC,OAAjC2E,IAAAD,EAAiCC,GAAA5E,UAAA4E,GACrE,IACI,IAEMQ,EAFiBT,EAAQG,OAEEC,KAAI,SAAA7B,GAAU,OAAA,IAAIE,KAAKC,OAAOH,GAAQI,QAAQ,IAC/E,OAAO8B,EAAUC,OAAM,SAAA/B,GAAY,OAAAA,IAAa8B,EAAU,EAAvB,GACtC,CAAC,MAAOH,GAEL,OADAC,QAAQD,MAAMA,IACP,CACV,CACL,CCNc,SAAgBK,EAC1BC,EACAC,EACAC,EACAC,iHAEMC,EAAa,IAAIC,gBACjBC,EAASF,EAAWE,QAEpBC,EAAUC,KAAKC,KAAIN,aAAA,EAAAA,EAAUI,UAAW/C,EAAYA,KAC7CkD,YAAW,WAAM,OAAAN,EAAWO,OAAO,GAAEJ,oBAInC,6BAAM,CAAA,EAAAK,MAAM,GAAGC,OAAAb,EAAGc,SAAOD,OLhBT,yBKgBmC,CAC1DE,OAAQ,OACRC,QACI9G,EAAAA,EAAA,CAAA,eAAgB,oBACZ8F,EAAGiB,QAAU,CAAE,eAAgBjB,EAAGiB,SAClCjB,EAAGkB,WAAa,CAAE,mBAAoBlB,EAAGkB,YAEjD/E,KAAMgF,KAAKC,UAAU,CACjBnB,OAAMA,EAAEC,aAAYA,EAAEC,SAAQA,IAElCG,OAAMA,mBAVVe,EAAWC,sBAaX,GAAoB,gBAAhBC,wBAAK,EAALA,EAAOC,MACP,MAAM,IAAIC,MAAM,oJAEpB,MAAMF,SAGN,OAACF,EAASK,GAAE,CAAA,EAAA,MACFD,MAAKE,KAAIC,GAAApD,EAAA,GAAAqC,OAAAQ,EAASQ,OAAM,OAAAhB,OAAK,CAAA,EAAMQ,EAASS,SAAtD,KAAA,EAAA,MAAM,YAAIL,MAAK,MAAA,EAACG,WAAuBN,EAAqB9E,YAEjD,KAAA,EAAA,MAAA,CAAA,EAAM6E,EAASU,eAC9B,MAAA,CAAA,EADeT,EAAqB9E,cAEvC,CCtCa,SAAgBwF,EAC1BhC,EACAC,EACAC,EACAC,iHAEMC,EAAa,IAAIC,gBACjBC,EAASF,EAAWE,QAEpBC,EAAUC,KAAKC,KAAIN,aAAA,EAAAA,EAAUI,UAAW/C,EAAYA,KAC7CkD,YAAW,WAAM,OAAAN,EAAWO,OAAO,GAAEJ,oBAGnC,6BAAM,CAAA,EAAAK,MAAM,GAAGC,OAAAb,EAAGc,SAAOD,ONhBb,uBMgBmC,CACtDE,OAAQ,OACRC,QACI9G,EAAAA,EAAA,CAAA,eAAgB,oBACZ8F,EAAGiB,QAAU,CAAE,eAAgBjB,EAAGiB,SAClCjB,EAAGkB,WAAa,CAAE,mBAAoBlB,EAAGkB,YAEjD/E,KAAMgF,KAAKC,UAAU,CACjBnB,OAAMA,EAAEC,aAAYA,EAAEC,SAAQA,IAElCG,OAAMA,mBAVVe,EAAWC,sBAaX,GAAoB,gBAAhBC,wBAAK,EAALA,EAAOC,MACP,MAAM,IAAIC,MAAM,oJAEpB,MAAMF,SAGN,OAACF,EAASK,GAAE,CAAA,EAAA,MACFD,MAAKE,KAAIC,GAAApD,EAAA,GAAAqC,OAAAQ,EAASQ,OAAM,OAAAhB,OAAK,CAAA,EAAMQ,EAASS,SAAtD,KAAA,EAAA,MAAM,YAAIL,MAAK,MAAA,EAACG,WAAuBN,EAAqB9E,YAEzD,KAAA,EAAA,MAAA,CAAA,EAAM6E,EAASU,QAAtB,KAAA,EAAA,MAAA,CAAA,EAAOT,gBACV,CC9BK,SAAUW,EAAWrE,GACvB,IAAAlC,UACA8C,EAAAZ,EAAAwB,QAAAA,aAAU,CAAC7B,GAAqBiB,EAChCoD,EAAYhE,EAAAsE,QAAZA,OAAO,IAAAN,EAAG,CAAE,EAAAA,EAKZ,OAAO,IAAI/D,KAAKsE,aAAa/C,KAAWgD,gBAAiB,QAAWF,IAAWG,OAAO3G,EAC1F,CAaM,SAAU4G,EAAgB1E,GAC5B,IAAAlC,UACA8C,EAAAZ,EAAAwB,QAAAA,aAAU,CAAC7B,GAAqBiB,EAChCoD,EAAYhE,EAAAsE,QAAZA,OAAO,IAAAN,EAAG,CAAE,EAAAA,EAKZ,OAAO,IAAI/D,KAAK0E,eAAenD,EAAOlF,EAAA,CAAIsI,SAAU,UAAWJ,gBAAiB,QAAWF,IAAWG,OAAO3G,EACjH,CAeM,SAAU+G,EAAgB7E,OAC5BlC,EAAKkC,EAAAlC,MACL8C,EAAgCZ,EAAAwB,QAAhCA,OAAU,IAAAZ,EAAA,CAACjB,GAAqBiB,EAChCoD,aAAAc,OAAW,IAAAd,EAAA,MAAKA,EAChBN,YAAAY,OAAU,IAAAZ,EAAA,CAAA,EAAEA,EAOZ,OAAO,IAAIzD,KAAKsE,aAAa/C,EAAWlF,EAAA,CAAAyI,MAAO,WAAYD,WAAUN,gBAAiB,QAAWF,IAAWG,OAAO3G,EACvH,CAaM,SAAUkH,EAAYhF,GACxB,IAAAlC,UACA8C,EAAAZ,EAAAwB,QAAAA,aAAU,CAAC7B,GAAqBiB,EAChCoD,EAAYhE,EAAAsE,QAAZA,OAAO,IAAAN,EAAG,CAAE,EAAAA,EAMZ,OAAO,IAAI/D,KAAKgF,WAAWzD,EAAOlF,EAAA,CAC9BmE,KAAM,cACNsE,MAAO,QACJT,IACJG,OAAO3G,EACd,CC7FA,IAAMoH,EAA6C,CAC/CC,IAAK,WACLC,IAAK,SACLC,SAAU,WACVP,SAAU,YASR,SAAUQ,EAAsBC,GAClC,GAAsB,iBAAXA,EACP,MAAM,IAAI1B,MAAM,gCAAyB0B,EAAM,sBAOnD,IALA,IAGIC,EAHErH,EAAgC,GAChCsH,EAAQ,aACVC,EAAY,EAGwB,QAAhCF,EAAQC,EAAME,KAAKJ,KAAmB,CACnC,IAAAK,EAAsBJ,EAAK,GAAhBK,EAAWL,EAAK,GAC5BM,EAAaN,EAAMO,MAGzB,GAA+B,MAA3BR,EAAOO,EAAa,GAAxB,CAYIA,EAAaJ,GACbvH,EAAOsB,KAAK8F,EAAOS,MAAMN,EAAWI,IAIxC,IAAMG,EAAQJ,EAAQvF,MAAM,KAAKsB,KAAI,SAAAsE,GAAQ,OAAAA,EAAKC,MAAM,IAClDC,EAAMH,EAAM,GACZI,EAAeJ,EAAM,GAAKf,EAAgBe,EAAM,SAAMK,EAEtDC,EAAcjK,EAAA,CAChB8J,IAAGA,GACCC,GAAgB,CAAEG,SAAUH,IAEpClI,EAAOsB,KAAK8G,GAEZb,EAAYI,EAAaF,EAAU9I,MAlBlC,MAPOgJ,EAAa,EAAIJ,GACjBvH,EAAOsB,KAAK8F,EAAOS,MAAMN,EAAWI,EAAa,IAGrD3H,EAAOsB,KAAKmG,GACZF,EAAYI,EAAaF,EAAU9I,MAqB1C,CAOD,OAJI4I,EAAYH,EAAOzI,QACnBqB,EAAOsB,KAAK8F,EAAOS,MAAMN,IAGtBvH,CACX,CC/Dc,SAAUsI,EACpB1G,EACA2G,GAEA,QAFA,IAAAA,IAAAA,EAA0C,CAAA,IAErC5G,EAAeC,GAChB,OAAO4G,EAIX,GAAID,EAFJ3G,EAASc,EAAmBd,IAED,OAAO2G,EAAc3G,GAGhD,IAAM6G,EAAe,IAAI3G,KAAKC,OAAOH,GAC7B8G,EAAWD,EAAYC,OAC/B,GAAIA,GAAUC,EAAOD,GAAS,OAAOC,EAAOD,GAG5C,IAAME,EAAeH,EAAaI,WAC5BC,EAAqBF,EAAaF,QAAU,GAElD,OACIK,EAAWH,EAAa5G,WACxB2G,EAAOG,IACPN,CAER,CAGA,IAAMQ,EAAoB,KAEbR,EAAeQ,EAGtBD,EAAa,CACfE,GAAMD,EACNE,GAAMF,EACNG,GAAMH,EACNI,GARuB,KASvBC,GATuB,KAUvBC,GAAM,iBACNC,GAAM,iBACNC,GAAM,OACNC,IAAO,MAGLd,EAAS,CACXelRR,IAAMC,EAAoB,SAACC,GACvB,MAAuB,oBAAZC,SAA2BA,QAAQC,KACnCD,QAAQC,IAAIF,IAEhB,EACX,EAoBAhK,EAAA,WAgBI,SAAAA,EAAYxN,GAAA,IAAAY,OAAA,IAAAZ,EAMa,CAAE,EAAAA,EALvBgE,EAAWpD,EAAAyC,OAAXA,OAAS,IAAAW,EAAA,GAAEA,EACXN,cAAAJ,OAAY,IAAAI,EAAA,KACZiU,EAAA/W,EAAAgX,aAAAA,aAAe,GAAED,EACjBE,EAAAjX,EAAAkX,UAAAA,OAAS,IAAAD,EAAG,GAAEA,EACdE,EAAwBnX,EAAAsC,QAAxBA,OAAO,IAAA6U,EVvEe,sBUuEEA,EAExB3a,KAAKiG,OAASA,GAAUkU,EAAkB,cAC1Cna,KAAKkG,UAAYA,GAAaiU,EAAkB,kBAChDna,KAAK0a,UAAYA,GAAaP,EAAkB,iBAChDna,KAAKwa,aAAe/W,EAAmB+W,IAAiB,GACxDxa,KAAK8F,QAAUA,CAClB,CAoDL,OAvCUsK,EAAAxQ,UAAAgb,UAAN,SACI3V,EACAtC,EACAwC,sFASO,KAAA,EAAA,MAAA,CAAA,EAAMJ,EAAW/E,KAAMiF,EAAQtC,EAAMzD,EAAA,CAAIsb,aAAcxa,KAAKwa,cAAiBrV,KAApF,KAAA,EAAA,MAAA,CAAA,EAAOvC,gBACV,EAYKwN,EAAAxQ,UAAAib,aAAN,SACI5V,EACAtC,EACAwC,sFASO,KAAA,EAAA,MAAA,CAAA,EAAM6B,EAAchH,KAAMiF,EAAQtC,EAAMzD,EAAA,CAAIsb,aAAcxa,KAAKwa,cAAiBrV,KAAvF,KAAA,EAAA,MAAA,CAAA,EAAOvC,gBACV,EACJwN,CAAD,8CAiPgB,SAAgBhM,EAA4B0W,GACxD,OC5WU,SACV1W,EAA4B0W,GAM5B,GAJuB,iBAAZ1W,IACPA,EAAU,CAACA,IACfA,EAAUA,EAAQ2W,OAAOrY,KACzBoY,EAAkBA,EAAgBC,OAAOrY,IACnB,OAAO0B,EAAQ,GACrC,mBAAWzB,GACP,IAAKD,EAAeC,GAAkB,MAAA,WAGtC,IAFA,IAAMqY,EAAgBvX,EAAmBd,GACnCsY,EAAuB,GACArY,EAAA,EAAAsY,EAAeJ,EAAflY,WAAAA,IAAiB,CAAzC,IAAMuY,EAAcD,EAAAtY,GACfwY,EAAwB3X,EAAmB0X,GACjD,GAAIH,IAAkBI,eACXA,GACPxW,EAAgBoW,EAAeI,IAC/BH,EAAW5Y,KAAK+Y,EACvB,CACD,OAAIH,EAAWvb,OACJ,CAAAgB,MAAAua,EAAWI,MAAK,SAAAC,GAAa,OAAA3X,EAAeqX,EAAeM,EAAU,KACxEL,EAAW,SAFnB,OAXiBM,EAAAnX,EAAAC,EAAAkX,EAAA7b,OAAA2E,IAAO,CAAvB,QAAYkX,EAAAlX,wCAchB,CAEL,CDoVWmX,CAAiBpX,EAAS0W,EACrC,yBA1DM,SAAyBW,GAC3B,OAAOhU,EAAgBgU,EAC3B,yBAfM,SAAyBA,GAC3B,OAAOnU,EAAgBmU,EAC3B,qBAuBM,SAAqBA,GACvB,OAAO7T,EAAY6T,EACvB,oBAvCM,SAAoBA,GACtB,OAAOxU,EAAWwU,EACtB,6BAgDM,SAA6BA,GAC/B,OHrOA/a,GADgCkC,EGsOL6Y,SHpO3BC,SACAlY,EAAAZ,EAAAwB,QAAAA,OAAO,IAAAZ,EAAG,CAACjB,KACXqE,EAAAhE,EAAAsE,QAAAA,OAAO,IAAAN,EAAG,CAAA,EAAEA,EAOL,IAAI/D,KAAK8Y,mBAAmBvX,EAAWlF,EAAA,CAAAyI,MAAO,OAAQiU,QAAS,QAAW1U,IAAWG,OAAO3G,EAAOgb,GAXxG,IAA8B9Y,EAChClC,EACAgb,EACAlY,EAAAY,EACAwC,EAAAM,CGmOJ,6BA1MM,SAA6BvE,GAC/B,OEvIE,SAA8BkZ,SAChC,IACI,IAAMlZ,EAAS,IAAIE,KAAKC,OAAO+Y,GAE/B,MAAgD,SAAhB,UAAxBlZ,aAAA,EAAAA,EAAgBmZ,gBAAQ,IAAAlZ,OAAA,EAAAA,EAAEmZ,WAAsB,MAAQ,KACnE,CAAC,MAAAvY,GAEE,MAAO,KACV,CACL,CF8HWwY,CAAoBrZ,EAC/B,yBAqFgB,SAAeA,EAAgBsZ,GAC3C,OAAO5S,EAAgB1G,EAAQsZ,EACnC,wBA9EgB,SAActZ,EAAgBuZ,GAC1C,YAD0C,IAAAA,IAAAA,EAA6C3Z,GG9I3E,SAAesZ,EAAcM,QAAA,IAAAA,IAAAA,EAA8C5Z,GACvF,IAEI,OADqB,IAAIM,KAAKO,aAAa,CAAC+Y,EAAiB5Z,GAAuB,CAAEc,KAAM,aACxEC,GAAGuY,IAAS,EACnC,CAAC,MAAAjZ,GAEE,MAAO,EACV,CACL,CHuIWwZ,CAAezZ,EAAQuZ,EAClC,8BAmCgB,SAAoBvZ,EAAgBuZ,GA4BhD,OIzKU,SACVvZ,EAAgBuZ,QAAA,IAAAA,IAAAA,EAA4C3Z,GAE5D,IAEII,EAASc,EAAmBd,GAE5B,IAAM6G,EAAe,IAAI3G,KAAKC,OAAOH,GAC/B0Z,EAAe7S,EAAazG,SAC5BuZ,EAAa9S,EAAaC,OAE1B8S,EAAkB,IAAI1Z,KAAKC,OAAOH,GAAQiH,WAC1C4S,EAAgBD,EAAgBE,WAChCC,EAAaH,EAAgB9S,QAAU,GACvCkT,EAAaJ,EAAgBK,QAAU,GAGvCC,EADkB,IAAIha,KAAKC,OAAOH,GAAQma,WACVL,WAIhCM,EAAgB,IAAIla,KAAKO,aAAa,CAAC8Y,EAAevZ,EAAQJ,GAAuB,CAAEc,KAAM,aAC7F2Z,EAAsB,IAAIna,KAAKO,aAAa,CAACT,EAAQuZ,EAAe3Z,GAAuB,CAAEc,KAAM,aAEnGmD,EAAOuW,EAAczZ,GAAGX,IAAWA,EACnCsa,EAAaD,EAAoB1Z,GAAGX,IAAWA,EAE/Cua,EAAgBH,EAAczZ,GAAGkZ,IAAkB7Z,EACnDwa,EAAsBH,EAAoB1Z,GAAGkZ,IAAkB7Z,EAE/Dya,EAAgBL,EAAczZ,GAAGuZ,IAAkBla,EACnD0a,EAAsBL,EAAoB1Z,GAAGuZ,IAAkBla,EAE/D2a,EAAeP,EAAczZ,GAAG+Y,IAAiB1Z,EACjD4a,EAAqBP,EAAoB1Z,GAAG+Y,IAAiB1Z,EAE7D6a,EAAqBlB,EAAa,GAAGzW,OAAAyX,EAAiB,MAAAzX,OAAAyW,OAAegB,EACrEG,EAA2BnB,EAAa,GAAGzW,OAAA0X,EAAuB,MAAA1X,OAAAyW,OAAeiB,EAIjFG,EAAc,IAAI7a,KAAKO,aAAa,CAAC8Y,EAAevZ,EAAQJ,GAAuB,CAAEc,KAAM,WAC3Fsa,EAAoB,IAAI9a,KAAKO,aAAa,CAACT,EAAQuZ,EAAe3Z,GAAuB,CAAEc,KAAM,WAEjGua,EAAaF,EAAYpa,GAAGoZ,IAAe,GAC3CmB,EAAmBF,EAAkBra,GAAGoZ,IAAe,GAIvDoB,EAAc,IAAIjb,KAAKO,aAAa,CAAC8Y,EAAevZ,EAAQJ,GAAuB,CAAEc,KAAM,WAC3F0a,EAAoB,IAAIlb,KAAKO,aAAa,CAACT,EAAQuZ,EAAe3Z,GAAuB,CAAEc,KAAM,WASvG,MAAO,CACHwY,KAAMlZ,EAAQ6D,KAAIA,EAAEyW,WAAUA,EAC9BT,cAAaA,EAAEU,cAAaA,EAAEC,oBAAmBA,EACjDN,cAAaA,EAAEO,cAAaA,EAAEC,oBAAmBA,EACjDhB,aAAYA,EAAEiB,aAAYA,EAAEC,mBAAkBA,EAC9CC,mBAAkBA,EAAEC,yBAAwBA,EAC5Cf,WAAUA,EAAEkB,WAAUA,EAAEC,iBAAgBA,EACxClB,WAAUA,EAAEqB,WAdGF,EAAYxa,GAAGqZ,IAAe,GAcrBsB,iBAbHF,EAAkBza,GAAGqZ,IAAe,GAczDuB,MAVU7U,EAAgB1G,GAYjC,CAAC,MAAO+B,GAEL,IAAMmX,EAAOlZ,GAAU,GACjBwb,EAAYtC,aAAI,EAAJA,EAAM3Y,MAAM,KAM9B,MAAO,CACH2Y,KAAIA,EAAErV,KAAMqV,EAAMoB,WAAYpB,EAC9BW,cAAeX,EAAMqB,cAAerB,EAAMsB,oBAAqBtB,EAC/DgB,cAAehB,EAAMuB,cAAevB,EAAMwB,oBAAqBxB,EAC/DQ,aATEA,GAAe8B,aAAS,EAATA,EAAY,KAAMtC,GAAQ,GAS7ByB,aAAcjB,EAAckB,mBAAoBlB,EAC9DK,WATEA,EAAayB,EAAUze,OAAS,EAAIye,eAAAA,EAAY,IAAKA,aAAA,EAAAA,EAAY,KAAM,GAS7DP,WAAYlB,EAAYmB,iBAAkBnB,EACtDC,WATEA,GAAawB,aAAA,EAAAA,EAAY,KAAM,GASrBH,WAAYrB,EAAYsB,iBAAkBtB,EACtDa,mBATEA,EAAqBnB,EAAgBK,EAAa,GAAA7W,OAAGwW,EAAiB,MAAAxW,OAAA6W,EAAa,KAAGL,EAAgB,GASpFoB,yBAA0B5B,EAC9CqC,MAAO7U,EAAgBwS,GAE9B,CAEL,CJ+EWuC,CAAqBzb,EAAQuZ,EACxC,uCA8C8B,IAAiC9X,EAAA,GAAAC,EAAA,EAAjCA,EAAiC5E,UAAAC,OAAjC2E,IAAAD,EAAiCC,GAAA5E,UAAA4E,GAC3D,OAAOV,EAAkB5D,WAAA,EAAAqE,EAC7B,wCAa+B,IAAiCA,EAAA,GAAAC,EAAA,EAAjCA,EAAiC5E,UAAAC,OAAjC2E,IAAAD,EAAiCC,GAAA5E,UAAA4E,GAC5D,OAAOO,EAAmB7E,WAAA,EAAAqE,EAC9B,wBA3CM,SAAwBzB,GAC1B,OAAOD,EAAeC,EAC1B,gCA0HM,SAAgC8F,EAAkBrE,EAA6Bia,EAAiCC,GAClH,OFjSE,SAAiC7V,EAAkBrE,EAAmDia,EAAqCC,GAG7I,QAHqD,IAAAla,IAAAA,EAAiD7B,QAAE,IAAA8b,IAAAA,EAAmC,CAAA,QAAE,IAAAC,IAAAA,EAAyC,CAAA,GAC/J,iBAAZ7V,IACPA,EAAUP,EAAsBO,IACb,iBAAZA,EACP,OAAOA,EACX,IAAK8V,MAAMC,QAAQ/V,GACf,MAAM,IAAIhC,MAAM,yCAAkCgC,EAAO,gBAC7D,OAAOA,EAAQjE,KAAI,SAAAia,SACf,GAAoB,iBAATA,EAAmB,OAAOA,EACrC,GAAoB,iBAATA,EAAmB,CAC1B,IAAM/d,EAAQ2d,EAAUI,EAAKzV,KAC7B,OAAKyV,EAAKrV,SACiB,WAAlBqV,EAAKrV,SACHnC,EAAW,CACdvG,MAAKA,EAAE0D,QAAOA,EACd8C,QAASoX,EAAgBG,EAAKzV,OAGX,aAAlByV,EAAKrV,SACH3B,EACHvI,EAAAA,EAAA,CAAAwB,MAAKA,EAAE0D,QAAOA,GACVka,EAAgBG,EAAKzV,MAAQ,CAAE9B,QAASoX,EAAgBG,EAAKzV,QAClC,QAA3BpG,EAAA0b,EAAgBG,EAAKzV,YAAM,IAAApG,OAAA,EAAAA,EAAA8E,WAAY,CAAEA,SAAU4W,EAAgBG,EAAKzV,KAAKtB,YAG9D,aAAlB+W,EAAKrV,SACH9B,EAAepI,EAAA,CAClBwB,MAAKA,EAAE0D,QAAOA,GACVka,EAAgBG,EAAKzV,MAAQ,CAAE9B,QAASoX,EAAgBG,EAAKzV,QAG9C,SAAlByV,EAAKrV,SACHxB,EAAW1I,EAAA,CACdwB,MAAKA,EAAE0D,QAAOA,GACVka,EAAgBG,EAAKzV,MAAQ,CAAE9B,QAASoX,EAAgBG,EAAKzV,QAGlEtI,EA1BoBA,CA2B9B,CACL,IAAGge,KAAK,GACZ,CEyPWC,CAAuBlW,EAASrE,EAASia,EAAWC,EAC/D,uCA0BoC9D,EAAsBtV,EAAsB4V,GAC5E,OK5XoB,SACpBN,EAAsBtV,EAAsB4V,GAI5C,SAAKpY,EAAe8X,KACf9X,EAAewC,IACf4V,GAAmBA,EAAgB8D,MAAK,SAAAzD,GAAkB,OAACzY,EAAeyY,EAAhB,KAI3DxX,EAAe6W,EAActV,IAI7B4V,IAAoBA,EAAgB8D,MAAK,SAAAzD,GAAkB,OAAAvW,EAAgBM,EAAciW,EAAe,IAIhH,CLyWW0D,CAAqBrE,EAActV,EAAc4V,EAC5D,+BA1CM,SAA+B3S,GACjC,OAAOD,EAAsBC,EACjC,4BAzGM,SAA4BxF,GAC9B,OAAOc,EAAmBd,EAC9B","x_google_ignoreList":[0]}